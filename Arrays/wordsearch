class Solution {
public:
     bool exist(vector<vector<char>>& board, string word) {
        int r = board.size();
        int c = board[0].size();
        vector<vector<bool>> visited(r,vector<bool>(c,false));
        for (int i = 0; i < r; i++){
            for (int j = 0; j < c; j++){
                if (board[i][j] == word[0]){
                    if (traversal(board,visited, word, i, j, 0)){
                        return true;
                    }
                }
            }
        }
        return false;
    }
    bool traversal(vector<vector<char>>& board,vector<vector<bool>>& visited, string & word, int i, int j, int index){
        if (index == word.size()-1){
            return true;
        }
        visited[i][j]=true;
        if(i>0 && board[i-1][j]==word[index+1] && !visited[i-1][j] && traversal(board, visited,  word,i-1,j,index+1) ){
            return true;
        }
        if(i<board.size()-1 && board[i+1][j]==word[index+1] && !visited[i+1][j] && traversal(board, visited, word,i+1,j,index+1)  ){
            return true;
        }
        if(j>0 && board[i][j-1]==word[index+1] && !visited[i][j-1] && traversal(board, visited, word,i,j-1,index+1)){
            return true;
        }
        if(j<board[0].size()-1  && board[i][j+1]==word[index+1] && !visited[i][j+1] && traversal(board, visited, word,i,j+1,index+1)){
            return true;
        }
        visited[i][j] = false;
        return false;
    }
};
